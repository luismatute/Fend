//
// Mixins
// --------------------------------------------------

//== Clearfix
	@mixin clearfix() {
		&:before,
		&:after {
			content: " "; // 1
			display: table; // 2
		}
		&:after {
			clear: both;
		}
	}

//== Inline Block (To be used with `include`)
	@mixin inline-block() {
		display: inline-block;
		vertical-align: middle;
	}

//== Animations
	@mixin animation($animation) {
		-webkit-animation: $animation;
			 -moz-animation: $animation;
				 -o-animation: $animation;
						animation: $animation;
	}
	@mixin animation-name($name) {
		-webkit-animation-name: $name;
						animation-name: $name;
	}
	@mixin animation-duration($duration) {
		-webkit-animation-duration: $duration;
			 -moz-animation-duration: $duration;
				 -o-animation-duration: $duration;
						animation-duration: $duration;
	}
	@mixin animation-timing-function($timing-function) {
		-webkit-animation-timing-function: $timing-function;
						animation-timing-function: $timing-function;
	}
	@mixin animation-delay($delay) {
		-webkit-animation-delay: $delay;
						animation-delay: $delay;
	}
	@mixin animation-iteration-count($iteration-count) {
		-webkit-animation-iteration-count: $iteration-count;
						animation-iteration-count: $iteration-count;
	}
	@mixin animation-direction($direction) {
		-webkit-animation-direction: $direction;
						animation-direction: $direction;
	}
	@mixin animation-fill-mode($fill-mode) {
		-webkit-animation-fill-mode: $fill-mode;
						animation-fill-mode: $fill-mode;
	}

//== Adds keyframes blocks for supported prefixes, removing redundant prefixes in the block's content
	@mixin keyframes($animation-name) {
		@-webkit-keyframes #{$animation-name} {
			@content;
		}
		@-moz-keyframes #{$animation-name} {
			@content;
		}
		@keyframes #{$animation-name} {
			@content;
		}
	}

//== Gradients
	//** Horizontal gradient, from left to right
	// Creates two color stops, start and end, by specifying a color and position for each color stop.
	// Color stops are not available in IE9 and below.
		@mixin gradient-horizontal($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {
			background-image: -webkit-linear-gradient(left, $start-color $start-percent, $end-color $end-percent); // Safari 5.1-6, Chrome 10+
			background-image: -o-linear-gradient(left, $start-color $start-percent, $end-color $end-percent); // Opera 12
			background-image: linear-gradient(to right, $start-color $start-percent, $end-color $end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
			background-repeat: repeat-x;
			filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=1); // IE9 and down
		}

	//** Vertical gradient, from top to bottom
	// Creates two color stops, start and end, by specifying a color and position for each color stop.
	// Color stops are not available in IE9 and below.
		@mixin gradient-vertical($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {
			background-image: -webkit-linear-gradient(top, $start-color $start-percent, $end-color $end-percent);  // Safari 5.1-6, Chrome 10+
			background-image: -o-linear-gradient(top, $start-color $start-percent, $end-color $end-percent);  // Opera 12
			background-image: linear-gradient(to bottom, $start-color $start-percent, $end-color $end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
			background-repeat: repeat-x;
			filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=0); // IE9 and down
		}

		@mixin gradient-directional($start-color: #555, $end-color: #333, $deg: 45deg) {
			background-repeat: repeat-x;
			background-image: -webkit-linear-gradient($deg, $start-color, $end-color); // Safari 5.1-6, Chrome 10+
			background-image: -o-linear-gradient($deg, $start-color, $end-color); // Opera 12
			background-image: linear-gradient($deg, $start-color, $end-color); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
		}
		@mixin gradient-horizontal-three-colors($start-color: #00b3ee, $mid-color: #7a43b6, $color-stop: 50%, $end-color: #c3325f) {
			background-image: -webkit-linear-gradient(left, $start-color, $mid-color $color-stop, $end-color);
			background-image: -o-linear-gradient(left, $start-color, $mid-color $color-stop, $end-color);
			background-image: linear-gradient(to right, $start-color, $mid-color $color-stop, $end-color);
			background-repeat: no-repeat;
			filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=1); // IE9 and down, gets no color-stop at all for proper fallback
		}
		@mixin gradient-vertical-three-colors($start-color: #00b3ee, $mid-color: #7a43b6, $color-stop: 50%, $end-color: #c3325f) {
			background-image: -webkit-linear-gradient($start-color, $mid-color $color-stop, $end-color);
			background-image: -o-linear-gradient($start-color, $mid-color $color-stop, $end-color);
			background-image: linear-gradient($start-color, $mid-color $color-stop, $end-color);
			background-repeat: no-repeat;
			filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=0); // IE9 and down, gets no color-stop at all for proper fallback
		}
		@mixin gradient-radial($inner-color: #555, $outer-color: #333) {
			background-image: -webkit-radial-gradient(circle, $inner-color, $outer-color);
			background-image: radial-gradient(circle, $inner-color, $outer-color);
			background-repeat: no-repeat;
		}
		@mixin gradient-striped($color: rgba(255,255,255,.15), $angle: 45deg) {
			background-image: -webkit-linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);
			background-image: -o-linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);
			background-image: linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);
		}


	//** Convert angle
	// @author Chris Eppstein
	// @param {Number} $value - Value to convert
	// @param {String} $unit - Unit to convert to
	// @return {Number} Converted angle
		@function convert-angle($value, $unit) {
			$convertable-units: deg grad turn rad;
			$conversion-factors: 1 (10grad/9deg) (1turn/360deg) (3.1415926rad/180deg);
			@if index($convertable-units, unit($value)) and index($convertable-units, $unit) {
				@return $value
							/ nth($conversion-factors, index($convertable-units, unit($value)))
							* nth($conversion-factors, index($convertable-units, $unit));
			}

			@warn "Cannot convert `#{unit($value)}` to `#{$unit}`.";
		}

	//** Test if `$value` is an angle
	// @param {*} $value - Value to test
	// @return {Bool}
		@function is-direction($value) {
			$is-direction: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
			$is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

			@return $is-direction or $is-angle;
		}

	//** Convert a direction to legacy syntax
	// @param {Keyword | Angle} $value - Value to convert
	// @require {function} is-direction
	// @require {function} convert-angle
		@function legacy-direction($value) {
			@if is-direction($value) == false {
				@warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction";
			}

			$conversion-map: ( 
				to top          : bottom,
				to top right    : bottom left,
				to right top    : left bottom,
				to right        : left,
				to bottom right : top left,
				to right bottom : left top,
				to bottom       : top,
				to bottom left  : top right,
				to left bottom  : right top,
				to left         : right,
				to left top     : right bottom,
				to top left     : bottom right
			);

			@if map-has-key($conversion-map, $value) {
				@return map-get($conversion-map, $value);
			}

			@return 90deg - convert-angle($value, 'deg');
		}

	//** Mixin printing a linear-gradient 
	// as well as a plain color fallback 
	// and the `-webkit-` prefixed declaration
	// @access public
	// @param {String | List | Angle} $direction - Linear gradient direction
	// @param {Arglist} $color-stops - List of color-stops composing the gradient
		@mixin linear-gradient($direction, $color-stops...) {
			@if is-direction($direction) == false {
				$color-stops: ($direction, $color-stops);
				$direction: 180deg;
			}

			background: nth(nth($color-stops, 1), 1);
			background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
			background: linear-gradient($direction, $color-stops);
		}

//== Border Radius
	@mixin border-top-radius($radii) {
		border-top-left-radius: $radii;
		border-top-right-radius: $radii;
	}

	@mixin border-right-radius($radii) {
		border-bottom-right-radius: $radii;
		border-top-right-radius: $radii;
	}

	@mixin border-bottom-radius($radii) {
		border-bottom-left-radius: $radii;
		border-bottom-right-radius: $radii;
	}

	@mixin border-left-radius($radii) {
		border-bottom-left-radius: $radii;
		border-top-left-radius: $radii;
	}

//== Backface visibility
	// Prevent browsers from flickering when using CSS 3D transforms.
	// Default value is `visible`, but can be changed to `hidden`
	@mixin backface-visibility($visibility){
		-webkit-backface-visibility: $visibility;
			 -moz-backface-visibility: $visibility;
						backface-visibility: $visibility;
	}

//== Drop shadows
	// Note: Deprecated `.box-shadow()` as of v3.1.0 since all of Bootstrap's
	// supported browsers that have box shadow capabilities now support it.
	@mixin box-shadow($shadow...) {
		-webkit-box-shadow: $shadow; // iOS <4.3 & Android <4.1
						box-shadow: $shadow;
	}

//== Box sizing
	@mixin box-sizing($boxmodel) {
		-webkit-box-sizing: $boxmodel;
			 -moz-box-sizing: $boxmodel;
						box-sizing: $boxmodel;
	}

//== Placeholder text
	@mixin placeholder {
		$placeholders: ":-webkit-input" ":-moz" "-moz" "-ms-input";
		@each $placeholder in $placeholders {
			&:#{$placeholder}-placeholder {
				@content;
			}
		}
	}

//== Transformations
	@mixin transform($rules...) {
		-webkit-transform: $rules;
				-ms-transform: $rules; // IE9 only
				 -o-transform: $rules;
						transform: $rules;
	}

	@mixin scale($ratio...) {
		-webkit-transform: scale($ratio);
				-ms-transform: scale($ratio); // IE9 only
				 -o-transform: scale($ratio);
						transform: scale($ratio);
	}

	@mixin scale3d($ratio...) {
		-webkit-transform: scale3d($ratio);
				-ms-transform: scale3d($ratio); // IE9 only
				 -o-transform: scale3d($ratio);
						transform: scale3d($ratio);
	}

	@mixin scaleX($ratio) {
		-webkit-transform: scaleX($ratio);
				-ms-transform: scaleX($ratio); // IE9 only
				 -o-transform: scaleX($ratio);
						transform: scaleX($ratio);
	}
	@mixin scaleY($ratio) {
		-webkit-transform: scaleY($ratio);
				-ms-transform: scaleY($ratio); // IE9 only
				 -o-transform: scaleY($ratio);
						transform: scaleY($ratio);
	}
	@mixin skew($x, $y) {
		-webkit-transform: skewX($x) skewY($y);
				-ms-transform: skewX($x) skewY($y); // See https://github.com/twbs/bootstrap/issues/4885; IE9+
				 -o-transform: skewX($x) skewY($y);
						transform: skewX($x) skewY($y);
	}
	@mixin translate($x, $y) {
		-webkit-transform: translate($x, $y);
				-ms-transform: translate($x, $y); // IE9 only
				 -o-transform: translate($x, $y);
						transform: translate($x, $y);
	}
	@mixin translate3d($x, $y, $z) {
		-webkit-transform: translate3d($x, $y, $z);
			 -moz-transform: translate3d($x, $y, $z);
				 -o-transform: translate3d($x, $y, $z);
						transform: translate3d($x, $y, $z);
	}
	@mixin rotate($degrees) {
		-webkit-transform: rotate($degrees);
			 -moz-transform: rotate($degrees);
				-ms-transform: rotate($degrees); // IE9 only
				 -o-transform: rotate($degrees);
						transform: rotate($degrees);
	}
	@mixin rotateX($degrees) {
		-webkit-transform: rotateX($degrees);
			 -moz-transform: rotateX($degrees);
				-ms-transform: rotateX($degrees); // IE9 only
				 -o-transform: rotateX($degrees);
						transform: rotateX($degrees);
	}
	@mixin rotateY($degrees) {
		-webkit-transform: rotateY($degrees);
				-ms-transform: rotateY($degrees); // IE9 only
				 -o-transform: rotateY($degrees);
						transform: rotateY($degrees);
	}
	@mixin perspective($perspective) {
		-webkit-perspective: $perspective;
			 -moz-perspective: $perspective;
						perspective: $perspective;
	}
	@mixin perspective-origin($perspective) {
		-webkit-perspective-origin: $perspective;
			 -moz-perspective-origin: $perspective;
						perspective-origin: $perspective;
	}
	@mixin transform-origin($origin) {
		-webkit-transform-origin: $origin;
			 -moz-transform-origin: $origin;
				-ms-transform-origin: $origin; // IE9 only
						transform-origin: $origin;
	}

//== Transitions
	@mixin transition($transition...) {
		-webkit-transition: $transition;
				 -o-transition: $transition;
						transition: $transition;
	}
	@mixin transition-property($transition-property...) {
		-webkit-transition-property: $transition-property;
						transition-property: $transition-property;
	}
	@mixin transition-delay($transition-delay) {
		-webkit-transition-delay: $transition-delay;
						transition-delay: $transition-delay;
	}
	@mixin transition-duration($transition-duration...) {
		-webkit-transition-duration: $transition-duration;
						transition-duration: $transition-duration;
	}
	@mixin transition-timing-function($timing-function) {
		-webkit-transition-timing-function: $timing-function;
						transition-timing-function: $timing-function;
	}
	@mixin transition-transform($transition...) {
		-webkit-transition: -webkit-transform $transition;
			 -moz-transition: -moz-transform $transition;
				 -o-transition: -o-transform $transition;
						transition: transform $transition;
	}

//== User select
	// For selecting text on the page
	@mixin user-select($select) {
		-webkit-user-select: $select;
			 -moz-user-select: $select;
				-ms-user-select: $select; // IE10+
						user-select: $select;
	}

	@mixin selection {
		$before-colons: "";

		@if & {
			$before-colons: "&"
		}

		#{$before-colons}::selection {
			@content;
		}
		#{$before-colons}::-moz-selection {
			@content;
		}
	}

//== Responsive image
	// Keep images from scaling beyond the width of their parents.
	@mixin img-responsive($display: block) {
		display: $display;
		max-width: 100%; // Part 1: Set a maximum relative to the parent
		height: auto; // Part 2: Scale the height according to the width, otherwise you get stretching
	}

//== Filter
	@mixin filter($filter-type,$filter-amount) {
		-webkit-filter: $filter-type+unquote('(#{$filter-amount})');
		-moz-filter: $filter-type+unquote('(#{$filter-amount})');
		-ms-filter: $filter-type+unquote('(#{$filter-amount})');
		-o-filter: $filter-type+unquote('(#{$filter-amount})');
		filter: $filter-type+unquote('(#{$filter-amount})');
	}

//== Prefixer
	@mixin prefixer ($property, $value, $prefixes) {
		@each $prefix in $prefixes {
			@if $prefix == webkit {
				@if $prefix-for-webkit {
					-webkit-#{$property}: $value;
				}
			}
			@else if $prefix == moz {
				@if $prefix-for-mozilla {
					-moz-#{$property}: $value;
				}
			}
			@else if $prefix == ms {
				@if $prefix-for-microsoft {
					-ms-#{$property}: $value;
				}
			}
			@else if $prefix == o {
				@if $prefix-for-opera {
					-o-#{$property}: $value;
				}
			}
			@else if $prefix == spec {
				@if $prefix-for-spec {
					#{$property}: $value;
				}
			}
			@else  {
				@warn "Unrecognized prefix: #{$prefix}";
			}
		}
	}

	@mixin disable-prefix-for-all() {
		$prefix-for-webkit:    false !global;
		$prefix-for-mozilla:   false !global;
		$prefix-for-microsoft: false !global;
		$prefix-for-opera:     false !global;
		$prefix-for-spec:      false !global;
	}

//== REM function
	@function rem-separator($list) {
		@if function-exists("list-separator") == true {
			@return list-separator($list);
		}

		$test-list: ();
		@each $item in $list {
			$test-list: append($test-list, $item, space);
		}

		@return if($test-list == $list, space, comma);
	}

	@mixin rem-baseline($zoom: 100%) {
		font-size: $zoom / 16px * $font-size;
	}

	@function rem-convert($to, $values...) {
		$result: ();
		$separator: rem-separator($values);

		@each $value in $values {
			@if type-of($value) == "number" and unit($value) == "rem" and $to == "px" {
				$result: append($result, $value / 1rem * $font-size, $separator);
			} @else if type-of($value) == "number" and unit($value) == "px" and $to == "rem" {
				$result: append($result, $value / ($font-size / 1rem), $separator);
			} @else if type-of($value) == "list" {
				$result: append($result, rem-convert($to, $value...), $separator);
			} @else {
				$result: append($result, $value, $separator);
			}
		}

		@return $result;
	}

	@function rem($values...) {
		@if $rem-px-only {
			@return rem-convert(px, $values...);
		} @else {
			@return rem-convert(rem, $values...);
		}
	}

	@mixin rem($properties, $values...) {
		@if type-of($properties) == "map" {
			@each $property in map-keys($properties) {
				@include rem($property, map-get($properties, $property));
			}
		} @else {
			@each $property in $properties {
				@if $rem-fallback or $rem-px-only {
					#{$property}: rem-convert(px, $values...);
				}
				@if not $rem-px-only {
					#{$property}: rem-convert(rem, $values...);
				}
			}
		}
	}
	/*=======================Use=================================
	.rem {
		@include rem(width,20px);
	}
	.rem-new {
		@include rem(font-size,32px,12px);
	}
	==========================Output=============================
	.rem {
		width: 20px;
		width: 1.25rem;
	}
	.rem-new {
		font-size: 32px;
		font-size: 2.66667rem;
	}
	============================================================*/

//== Convert pixels to rems
	@function calc-rem($pxval) {
		@if not unitless($pxval) {
			$pxval: strip-units($pxval);
		}

		$base: $font-size;
		@if not unitless($base) {
			$base: strip-units($base);
		}
		@return ($pxval / $base) * 1rem;
	}

//== Srtips the units from a value. e.g. 12px -> 12
	@function strip-units($val) {
		@return ($val / ($val * 0 + 1));
	}
